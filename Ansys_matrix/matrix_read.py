#name of the file generated by Anays substructure analysis ('/antype,7' or '/antype,substr')
substructure_output = './Substructure_mat.dat'
#reorder of the degrees of freedom or not
reorder = 0

##########################################################################################
# A sub-function testing whether a string is a numeric value string
##########################################################################################
def is_number(num):
    try:
        float(num)
        return True
    except ValueError:
        pass
    try:
        import unicodedata
        unicodedata.numeric(num)
        return True
    except (TypeError, ValueError):
        pass
    return False

##########################################################################################
# A sub-function testing whether a string is a numeric value string
# by Yang, Jiashu
# 2021-08-08, at at Insititute for Risk and Reliability, Leibniz University Hannover
# Email: jiashuyang@tongji.edu.cn
##########################################################################################
def ansys_substructure_matrix_reader(substructure_output, reorder):
	import re
	import numpy as np
	from numpy.core.defchararray import isdigit

	#-----------------------------------------------------------------
	#open the file generated by Ansys substructure analysis
	#-----------------------------------------------------------------
	with open(substructure_output, 'r') as subslis:
		subs_context = subslis.readlines()
	nlines = len(subs_context)

	#-----------------------------------------------------------------
	#find indicator of optimized DOF order
	#-----------------------------------------------------------------
	orderflag = 0
	order_str = []
	for line0 in subs_context:
		line0 = line0.strip()
		if orderflag == 1:
			if len(line0) == 0:
				break
			line0_list = line0.split()
			for entry in line0_list:
				if not entry.isdigit():
					print('ERROR: Not every element is a integer value string!')
					break
			order_str.extend(line0_list)
		if (orderflag == 0) and (line0.find('REORDERED DOF POSITIONS') != -1):
			#strat of order value
			orderflag  = 1
	nDOF      = len(order_str)
	orderlist = [int(x)-1 for x in order_str]

	#-----------------------------------------------------------------
	#ind indicator of matrices
	#-----------------------------------------------------------------
	ii = -1
	slist = []
	mlist = []
	llist = []
	for line1 in subs_context:
		ii         = ii + 1
		line1      = line1.strip()
		line1_list = line1.split()
		len_line1  = len(line1_list)
		#record the index of the line
		if (len_line1 != 0) and (line1_list[0] == 'ROW'):
			# if the last element of 'line1_list' is 1, the following data is a row of stiffness matrix
			# if the last element of 'line1_list' is 2, the following data is a row of mass matrix  
			indicator = int(line1_list[-1])
			if  indicator == 1:
				#stiffness
				if int(line1_list[1]) != len(slist)+1:
					print('WARNING: A incompatiblility occurs in the row number. Please check carefully.')
				slist.append(ii+1)
			elif indicator == 2:
				#mass
				if int(line1_list[1]) != len(mlist)+1:
					print('WARNING: A incompatiblility occurs in the row number. Please check carefully.')
				mlist.append(ii+1)
		elif (len_line1 != 0) and (line1.find('LOAD VECTOR') == 0):
			llist.append(ii+1)

	nrowm = len(mlist)
	nrows = len(slist)
	if (nrows != nrowm) or (nDOF != nrows):
		print('ERROR: please check the number of rows of stiffness and mass matrices!\n')

	#-----------------------------------------------------------------
	#read and write stiffness matrix
	#-----------------------------------------------------------------
	#! The obtained matrix has been reordered by Ansys
	#initialize a 2D array for stiffness matrix
	stiffness_mat = np.zeros([nrows, nrows])
	rowind        = -1
	for rowloc in slist:
		rowind   = rowind + 1
		#read a row of stiffness matrix
		stiffrow = []
		for ind in range(rowloc, nlines):
			#remove additional space strings
			stiffrow0 = subs_context[ind].strip()
			#split strings separated by blank
			stiffrow0 = stiffrow0.split()
			if len(stiffrow0) == 0:
				#each row of the matrix is ended with a blank row
				break;
			else:
				numflag = 1
				#each string should be a numeric value in string format
				for ele in stiffrow0:
					if not is_number(ele):
						numflag = 0
						break
				if numflag == 1:
					stiffrow.extend(stiffrow0)
		#number of elements in this matrix row
		ncols = len(stiffrow)
		if ncols != nrows:
			print('ERROR: The number of columns do not equals to the number of rows of stiffness matrix!')
		colind = -1
		for entry in stiffrow:
			colind = colind + 1
			stiffness_mat[rowind, colind] = float(entry)

	#-----------------------------------------------------------------
	#read and write mass matrix
	#-----------------------------------------------------------------
	#! The obtained matrix has been reordered by Ansys
	#initialize a 2D array for stiffness matrix
	mass_mat    = np.zeros([nrowm, nrowm])
	rowind      = -1
	for rowloc in mlist:
		rowind  = rowind + 1
		#read a row of mass matrix
		massrow = []
		for ind in range(rowloc, nlines):
			#remove additional space strings
			massrow0 = subs_context[ind].strip()
			#split strings separated by blank
			massrow0 = massrow0.split()
			if len(massrow0) == 0:
				#each row of the matrix is ended with a blank row
				break;
			else:
				numflag = 1
				#each string should be a numeric value in string format
				for ele in massrow0:
					if not is_number(ele):
						numflag = 0
						break
				if numflag == 1:
					massrow.extend(massrow0)
		#number of elements in this matrix row
		ncolm = len(massrow)
		if ncolm != nrowm:
			print('ERROR: The number of columns do not equals to the number of rows of stiffness matrix!')
		colind = -1
		for entry in massrow:
			colind = colind + 1
			mass_mat[rowind, colind] = float(entry)

	#-----------------------------------------------------------------
	#read load vector
	#-----------------------------------------------------------------
	loadloc = llist[0]
	loadlist = []
	for ind in range(loadloc, nlines):
		loadlist0 = subs_context[ind].strip()
		loadlist0 = loadlist0.split()
		if len(loadlist0) == 0:
			break;
		else:
			numflag = 1
			for ele in loadlist0:
				if not is_number(ele):
					numflag = 0
					break
			if numflag == 1:
				loadlist.extend(loadlist0)

	load_vec = [float(x) for x in loadlist ]
	load_vec = np.array(load_vec)

	#-----------------------------------------------------------------
	#reset order of DOFs
	#-----------------------------------------------------------------
	if reorder == 1:
		stiffness_mat = stiffness_mat[np.ix_(orderlist,orderlist)]
		mass_mat      = mass_mat[np.ix_(orderlist,orderlist)]
		load_vec      = load_vec[orderlist]

	#-----------------------------------------------------------------
	#write stiffness/mass matrices and load vector into files
	#-----------------------------------------------------------------
	load_vec = load_vec.reshape([1,-1]).T
	if reorder == 0:
		np.savetxt('mass_mat_ss.dat', mass_mat, fmt='%f', delimiter=' ')
		np.savetxt('stiffness_mat_ss.dat', stiffness_mat, fmt='%f', delimiter=' ')
		np.savetxt('load_vec_ss.dat', load_vec, fmt='%f', delimiter=' ')
	elif reorder == 1:
		np.savetxt('mass_mat_ss_op.dat', mass_mat, fmt='%f', delimiter=' ')
		np.savetxt('stiffness_mat_ss_op.dat', stiffness_mat, fmt='%f', delimiter=' ')
		np.savetxt('load_vec_ss_op.dat', load_vec, fmt='%f', delimiter=' ')

##########################################################################################
if __name__ == '__main__':
	ansys_substructure_matrix_reader(substructure_output, reorder)